# frozen_string_literal: true

require 'prawn'
require 'gruff'
require_relative '../base.rb'

module Pdf
  module Template
    class EventFile < Pdf::Base
      def initialize(current_user)
        super
      end

      def write
        generate_file_name('events')
        Prawn::Document.new(@pdf_configuration) do |pdf|
          pdf.fill_color "666666"
          pdf.text "Events Report", :size => 32, :style => :bold, :align => :center
          pdf.move_down 80

          pdf.text "Report generated by:", :size => 14, :align => :justify, :inline_format => true, :style => :bold
          pdf.move_down 14

          pdf.text "Name: #{@current_user.name}", :size => 12, :align => :justify, :inline_format => true
          pdf.move_down 8

          pdf.text "Email: #{@current_user.email}", :size => 12, :align => :justify, :inline_format => true
          pdf.move_down 8

          pdf.move_down 20

          pdf.text "Last 50 Events", :size => 14, :align => :justify, :inline_format => true, :style => :bold
          pdf.move_down 14

          company_events = Event.based_on_company_name_with_filter(@current_user.company_name)

          company_events.limit(50).each do |event|
            pdf.text %Q{ Id #{event.id}, Category - #{event.category}, Name - #{event.event_name},\n
              Created by - #{event.user_name}, Previous event name - #{event.previous_event_name}, Next event name - #{event.next_event_name},\n
              Created at - #{event.created_at.strftime("%d/%m/%y at %H:%M")}, Started at - #{event.started_at.strftime("%d/%m/%y at %H:%M")}, Finished at - #{event.finished_at.strftime("%d/%m/%y at %H:%M")}
             }, :size => 12, :align => :justify, :inline_format => true
            pdf.move_down 8
          end

          pdf.move_down 20

          pdf.text "Number of registered Events - #{company_events.count(:id)}", :size => 14, :align => :justify, :inline_format => true, :style => :bold
          pdf.move_down 20

          # Creates Gruff object
          categories_chart = Gruff::Pie.new 900
          categories_chart.theme = Gruff::Themes::PASTEL

          company_events.group(:category).count(:category).map do|category_name, category_occurences|
            categories_chart.data(category_name, category_occurences)
          end

          @unique_identifier = rand(100000)
          categories_chart.write("tmp/categories_chart_#{@unique_identifier}.jpg")

          pdf.start_new_page

          pdf.text "Events Category Graphic", :size => 20, :style => :bold, :align => :center

          pdf.image "tmp/categories_chart_#{@unique_identifier}.jpg", :scale => 0.50

          event_names_chart = Gruff::Pie.new 900
          event_names_chart.theme = Gruff::Themes::PASTEL

          company_events.group('events.name').count(:name).each do|name, name_occurences|
            event_names_chart.data(name, name_occurences)
          end

          event_names_chart.write("tmp/event_names_chart_#{@unique_identifier}.jpg")

          pdf.start_new_page

          pdf.text "Events Graphic based on Name", :size => 20, :style => :bold, :align => :center

          pdf.image "tmp/event_names_chart_#{@unique_identifier}.jpg", :scale => 0.50

          event_creation_dates_chart = Gruff::Bar.new 900
          event_creation_dates_chart.theme = Gruff::Themes::PASTEL

          company_events.group(:created_at).count(:created_at).map do|event_creation_date, event_occurences|
            event_creation_dates_chart.data(event_creation_date, event_occurences)
          end

          event_creation_dates_chart.write("tmp/event_creation_dates_chart_#{@unique_identifier}.jpg")

          pdf.start_new_page

          pdf.text "Events Creation Per Date", :size => 20, :style => :bold, :align => :center

          pdf.image "tmp/event_creation_dates_chart_#{@unique_identifier}.jpg", :scale => 0.50

          pdf.font "Helvetica"
          pdf.text "Automated CX #{Time.now.year}", :size => 10, :inline_format => true, :valign => :bottom, :align => :left
          pdf.number_pages "Generated at: #{(Time.now).strftime("%d/%m/%y at %H:%M")}    Page <page> ", :start_count_at => 0, :page_filter => :all, :at => [pdf.bounds.right - 140, 7], :align => :right, :size => 8
          pdf.render_file("tmp/#{@file_name}.pdf")
        end
      end

      def delete
        File.delete("tmp/#{@file_name}.pdf")
        event_charts = %W[tmp/categories_chart_#{@unique_identifier}.jpg tmp/event_creation_dates_chart_#{@unique_identifier}.jpg tmp/event_names_chart_#{@unique_identifier}.jpg ]
        event_charts.map do |event_chart|
          File.delete(event_chart)
        end
      end
    end
  end
end
