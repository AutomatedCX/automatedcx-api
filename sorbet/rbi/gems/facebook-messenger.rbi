# This file is autogenerated. Do not edit it by hand. Regenerate it with:
#   srb rbi gems

# typed: strict
#
# If you would like to make changes to this file, great! Please create the gem's shim here:
#
#   https://github.com/sorbet/sorbet-typed/new/master?filename=lib/facebook-messenger/all/facebook-messenger.rbi
#
# facebook-messenger-2.0.1

module Facebook
end
module Facebook::Messenger
  def self.config; end
  def self.config=(config); end
  def self.configure; end
end
class Facebook::Messenger::Error < StandardError
end
class Facebook::Messenger::FacebookError < Facebook::Messenger::Error
  def code; end
  def fbtrace_id; end
  def initialize(error); end
  def message; end
  def subcode; end
  def to_s; end
  def type; end
  def user_msg; end
  def user_title; end
end
module Facebook::Messenger::Subscriptions
  def raise_errors(response); end
  def self.default_cookies; end
  def self.default_cookies=(arg0); end
  def self.default_options; end
  def self.default_options=(arg0); end
  def self.raise_errors(response); end
  def self.subscribe(access_token:, subscribed_fields: nil); end
  def self.unsubscribe(access_token:); end
  def subscribe(access_token:, subscribed_fields: nil); end
  def unsubscribe(access_token:); end
  extend HTTParty::ClassMethods
  extend HTTParty::ModuleInheritableAttributes::ClassMethods
  include HTTParty
  include HTTParty::ModuleInheritableAttributes
end
class Facebook::Messenger::Subscriptions::Error < Facebook::Messenger::FacebookError
end
module Facebook::Messenger::Profile
  def default_options; end
  def raise_errors(response); end
  def self.default_cookies; end
  def self.default_cookies=(arg0); end
  def self.default_options; end
  def self.default_options=(arg0); end
  def self.raise_errors(response); end
  def self.set(settings, access_token:); end
  def self.unset(settings, access_token:); end
  def set(settings, access_token:); end
  def unset(settings, access_token:); end
  extend HTTParty::ClassMethods
  extend HTTParty::ModuleInheritableAttributes::ClassMethods
  include HTTParty
  include HTTParty::ModuleInheritableAttributes
end
class Facebook::Messenger::Profile::Error < Facebook::Messenger::FacebookError
end
module Facebook::Messenger::Bot
  def self.config; end
  def self.default_cookies; end
  def self.default_cookies=(arg0); end
  def self.default_options; end
  def self.default_options=(arg0); end
  def self.deliver(message, page_id:); end
  def self.hooks; end
  def self.on(event, &block); end
  def self.receive(payload); end
  def self.trigger(event, *args); end
  def self.unhook; end
  extend HTTParty::ClassMethods
  extend HTTParty::ModuleInheritableAttributes::ClassMethods
  include HTTParty
  include HTTParty::ModuleInheritableAttributes
end
class Facebook::Messenger::Bot::ErrorParser
  def self.access_token_error?(error_code); end
  def self.account_linking_error?(error_code); end
  def self.bad_parameter_error?(error_code, error_subcode); end
  def self.internal_error?(error_code); end
  def self.limit_error?(error_code, error_subcode); end
  def self.permission_error?(error_code, error_subcode); end
  def self.raise_code_only_error(error_code, args); end
  def self.raise_code_subcode_error(error_code, error_subcode, args); end
  def self.raise_errors_from(response); end
end
class Facebook::Messenger::Bot::SendError < Facebook::Messenger::FacebookError
end
class Facebook::Messenger::Bot::AccessTokenError < Facebook::Messenger::Bot::SendError
end
class Facebook::Messenger::Bot::AccountLinkingError < Facebook::Messenger::Bot::SendError
end
class Facebook::Messenger::Bot::BadParameterError < Facebook::Messenger::Bot::SendError
end
class Facebook::Messenger::Bot::InternalError < Facebook::Messenger::Bot::SendError
end
class Facebook::Messenger::Bot::LimitError < Facebook::Messenger::Bot::SendError
end
class Facebook::Messenger::Bot::PermissionError < Facebook::Messenger::Bot::SendError
end
module Facebook::Messenger::Bot::MessageType
end
module Facebook::Messenger::Bot::MessagingType
end
module Facebook::Messenger::Bot::Tag
end
class Facebook::Messenger::BadRequestError < Facebook::Messenger::Error
end
class Facebook::Messenger::Server
  def app_secret_for(facebook_page_id); end
  def body; end
  def call(env); end
  def check_integrity; end
  def generate_hmac(content); end
  def parsed_body; end
  def receive; end
  def respond_with_error(error); end
  def self.call(env); end
  def signature; end
  def signature_for(string); end
  def trigger(events); end
  def valid_signature?; end
  def valid_verify_token?(token); end
  def verify; end
end
class Facebook::Messenger::ServerNoError < Facebook::Messenger::Server
  def call(env); end
  def send(text); end
  def sender; end
end
class Facebook::Messenger::Configuration
  def provider; end
  def provider=(arg0); end
end
class Facebook::Messenger::Configuration::AppSecretProofCalculator
  def self.call(app_secret, access_token); end
end
module Facebook::Messenger::Configuration::Providers
end
class Facebook::Messenger::Configuration::Providers::Base
  def access_token_for(*arg0); end
  def app_secret_for(*arg0); end
  def app_secret_proof_for(page_id = nil); end
  def calculate_app_secret_proof(app_secret, access_token); end
  def memoized_app_secret_proofs; end
  def valid_verify_token?(*arg0); end
end
class Facebook::Messenger::Configuration::Providers::Environment < Facebook::Messenger::Configuration::Providers::Base
  def access_token_for(*arg0); end
  def app_secret_for(*arg0); end
  def valid_verify_token?(verify_token); end
end
module Facebook::Messenger::Incoming
  def self.parse(payload); end
  def self.payload_is_echo?(payload); end
end
module Facebook::Messenger::Incoming::Common
  def initialize(messaging); end
  def mark_seen; end
  def messaging; end
  def prior_message; end
  def recipient; end
  def reply(message); end
  def sender; end
  def sent_at; end
  def typing_off; end
  def typing_on; end
end
class Facebook::Messenger::Incoming::Message
  def app_id; end
  def attachment_type; end
  def attachment_type?(attachment_type); end
  def attachment_url; end
  def attachments; end
  def audio_attachment?; end
  def echo?; end
  def fallback_attachment?; end
  def file_attachment?; end
  def id; end
  def image_attachment?; end
  def location_attachment?; end
  def location_coordinates; end
  def nlp; end
  def quick_reply; end
  def seq; end
  def text; end
  def video_attachment?; end
  include Facebook::Messenger::Incoming::Common
end
class Facebook::Messenger::Incoming::MessageEcho < Facebook::Messenger::Incoming::Message
end
class Facebook::Messenger::Incoming::MessageRequest < Facebook::Messenger::Incoming::Message
  def accept?; end
end
class Facebook::Messenger::Incoming::Delivery
  def at; end
  def ids; end
  def seq; end
  include Facebook::Messenger::Incoming::Common
end
class Facebook::Messenger::Incoming::Postback
  def payload; end
  def referral; end
  include Facebook::Messenger::Incoming::Common
end
class Facebook::Messenger::Incoming::Optin
  def ref; end
  def user_ref; end
  include Facebook::Messenger::Incoming::Common
end
class Facebook::Messenger::Incoming::Read
  def at; end
  def seq; end
  include Facebook::Messenger::Incoming::Common
end
class Facebook::Messenger::Incoming::AccountLinking
  def authorization_code; end
  def status; end
  include Facebook::Messenger::Incoming::Common
end
class Facebook::Messenger::Incoming::Referral
  def ref; end
  def referral; end
  include Facebook::Messenger::Incoming::Common
end
class Facebook::Messenger::Incoming::Referral::Referral
  def ad_id; end
  def initialize(referral); end
  def ref; end
  def source; end
  def type; end
end
class Facebook::Messenger::Incoming::Payment
  def payment; end
  include Facebook::Messenger::Incoming::Common
end
class Facebook::Messenger::Incoming::Payment::Payment
  def amount; end
  def initialize(payment); end
  def payload; end
  def payment_credential; end
  def shipping_option_id; end
  def user_info; end
end
class Facebook::Messenger::Incoming::PolicyEnforcement
  def action; end
  def reason; end
  include Facebook::Messenger::Incoming::Common
end
class Facebook::Messenger::Incoming::PassThreadControl
  def metadata; end
  def new_owner_app_id; end
  include Facebook::Messenger::Incoming::Common
end
class Facebook::Messenger::Incoming::GamePlay
  def context; end
  def game; end
  def game_play; end
  def payload; end
  def player; end
  def score; end
  include Facebook::Messenger::Incoming::Common
end
class Facebook::Messenger::Incoming::MessageReaction
  def action; end
  def emoji; end
  def reaction; end
  include Facebook::Messenger::Incoming::Common
end
class Facebook::Messenger::Incoming::UnknownPayload < Facebook::Messenger::Error
end
