# This file is autogenerated. Do not edit it by hand. Regenerate it with:
#   srb rbi gems

# typed: true
#
# If you would like to make changes to this file, great! Please create the gem's shim here:
#
#   https://github.com/sorbet/sorbet-typed/new/master?filename=lib/gruff/all/gruff.rbi
#
# gruff-0.10.0

module Gruff
end
module Magick
end
class Magick::Draw
  def annotate_scaled(img, width, height, x, y, text, scale); end
end
class String
  def commify(delimiter = nil); end
end
module Gruff::Themes
end
class Gruff::Base
  def add_color(colorname); end
  def bold_title; end
  def bold_title=(arg0); end
  def bottom_margin; end
  def bottom_margin=(arg0); end
  def calculate_caps_height(font_size); end
  def calculate_increment; end
  def calculate_spread; end
  def calculate_width(font_size, text); end
  def center(size); end
  def center_labels_over_point; end
  def center_labels_over_point=(arg0); end
  def clip_value_if_greater_than(value, max_value); end
  def colors; end
  def colors=(arg0); end
  def column_count; end
  def data(name, data_points = nil, color = nil); end
  def data_given?; end
  def deg2rad(angle); end
  def draw; end
  def draw_axis_labels; end
  def draw_label(x_offset, index, gravity = nil); end
  def draw_legend; end
  def draw_line_markers; end
  def draw_no_data; end
  def draw_title; end
  def draw_unique_label(index); end
  def draw_value_label(x_offset, y_offset, data_point, bar_value = nil); end
  def font; end
  def font=(font_path); end
  def font_color; end
  def font_color=(arg0); end
  def has_left_labels; end
  def has_left_labels=(arg0); end
  def hide_legend; end
  def hide_legend=(arg0); end
  def hide_line_markers; end
  def hide_line_markers=(arg0); end
  def hide_line_numbers; end
  def hide_line_numbers=(arg0); end
  def hide_title; end
  def hide_title=(arg0); end
  def hide_title?; end
  def initialize(target_width = nil); end
  def initialize_ivars; end
  def label(value, increment); end
  def label_max_size; end
  def label_max_size=(arg0); end
  def label_stagger_height; end
  def label_stagger_height=(arg0); end
  def label_truncation_style; end
  def label_truncation_style=(arg0); end
  def labels; end
  def labels=(arg0); end
  def left_margin; end
  def left_margin=(arg0); end
  def legend_at_bottom; end
  def legend_at_bottom=(arg0); end
  def legend_box_size; end
  def legend_box_size=(arg0); end
  def legend_font_size; end
  def legend_font_size=(arg0); end
  def legend_margin; end
  def legend_margin=(arg0); end
  def margins=(margin); end
  def marker_color; end
  def marker_color=(arg0); end
  def marker_count; end
  def marker_count=(arg0); end
  def marker_font_size; end
  def marker_font_size=(arg0); end
  def marker_shadow_color; end
  def marker_shadow_color=(arg0); end
  def maximum_value; end
  def maximum_value=(arg0); end
  def minimum_value; end
  def minimum_value=(arg0); end
  def no_data_message; end
  def no_data_message=(arg0); end
  def normalize; end
  def replace_colors(color_list = nil); end
  def reset_themes; end
  def right_margin; end
  def right_margin=(arg0); end
  def scale(value); end
  def scale_fontsize(value); end
  def set_colors; end
  def setup_data; end
  def setup_drawing; end
  def setup_graph_measurements; end
  def significant(i); end
  def sort; end
  def sort=(arg0); end
  def sort_data; end
  def sort_norm_data; end
  def sorted_drawing; end
  def sorted_drawing=(arg0); end
  def store; end
  def sum(arr); end
  def theme=(options); end
  def theme_37signals; end
  def theme_greyscale; end
  def theme_keynote; end
  def theme_odeo; end
  def theme_pastel; end
  def theme_rails_keynote; end
  def title; end
  def title=(arg0); end
  def title_font; end
  def title_font=(arg0); end
  def title_font_size; end
  def title_font_size=(arg0); end
  def title_margin; end
  def title_margin=(arg0); end
  def to_blob(file_format = nil); end
  def top_margin; end
  def top_margin=(arg0); end
  def truncate_label_text(text); end
  def use_data_label; end
  def use_data_label=(arg0); end
  def write(file_name = nil); end
  def x_axis_increment; end
  def x_axis_increment=(arg0); end
  def x_axis_label; end
  def x_axis_label=(arg0); end
  def y_axis_increment; end
  def y_axis_increment=(arg0); end
  def y_axis_label; end
  def y_axis_label=(arg0); end
end
class Gruff::IncorrectNumberOfDatasetsException < StandardError
end
class Gruff::Area < Gruff::Base
  def draw; end
  def fill_opacity; end
  def fill_opacity=(arg0); end
  def initialize_ivars; end
  def stroke_width; end
  def stroke_width=(arg0); end
end
class Gruff::BarConversion
  def get_left_y_right_y_scaled(data_point); end
  def graph_height=(arg0); end
  def graph_top=(arg0); end
  def minimum_value=(arg0); end
  def mode=(arg0); end
  def spread=(arg0); end
  def zero=(arg0); end
end
class Gruff::Bar < Gruff::Base
  def bar_spacing; end
  def bar_spacing=(arg0); end
  def calculate_spacing; end
  def draw; end
  def draw_bars; end
  def group_spacing; end
  def group_spacing=(arg0); end
  def initialize_ivars; end
  def label_formatting; end
  def label_formatting=(arg0); end
  def show_labels_for_bar_values; end
  def show_labels_for_bar_values=(arg0); end
  def spacing_factor=(space_percent); end
end
class Gruff::Bezier < Gruff::Base
  def draw; end
end
class Gruff::Bullet < Gruff::Base
  def data(value, maximum_value, options = nil); end
  def draw; end
  def draw_title; end
  def initialize(target_width = nil); end
end
class Gruff::Dot < Gruff::Base
  def draw; end
  def draw_label(y_offset, index); end
  def draw_line_markers; end
end
class Gruff::Histogram < Gruff::Bar
  def bin_width=(width); end
  def data(name, data_points = nil, color = nil); end
  def initialize_ivars; end
  def maximum_bin=(max); end
  def minimum_bin=(min); end
end
class Gruff::Histogram::HistogramArray < Array
  include Histogram
end
class Gruff::Line < Gruff::Base
  def baseline_color; end
  def baseline_color=(new_value); end
  def baseline_value; end
  def baseline_value=(new_value); end
  def contains_one_point_only?(data_row); end
  def dataxy(name, x_data_points = nil, y_data_points = nil, color = nil); end
  def dot_radius; end
  def dot_radius=(arg0); end
  def dot_style; end
  def dot_style=(arg0); end
  def draw; end
  def draw_horizontal_reference_line(reference_line); end
  def draw_reference_line(reference_line, left, right, top, bottom); end
  def draw_vertical_reference_line(reference_line); end
  def get_x_coord(x_data_point, width, offset); end
  def hide_dots; end
  def hide_dots=(arg0); end
  def hide_lines; end
  def hide_lines=(arg0); end
  def initialize(*args); end
  def line_width; end
  def line_width=(arg0); end
  def maximum_x_value; end
  def maximum_x_value=(arg0); end
  def minimum_x_value; end
  def minimum_x_value=(arg0); end
  def normalize; end
  def reference_line_default_color; end
  def reference_line_default_color=(arg0); end
  def reference_line_default_width; end
  def reference_line_default_width=(arg0); end
  def reference_lines; end
  def reference_lines=(arg0); end
  def setup_data; end
  def show_vertical_markers; end
  def show_vertical_markers=(arg0); end
  def sort_norm_data; end
end
class Gruff::Net < Gruff::Base
  def dot_radius; end
  def dot_radius=(arg0); end
  def draw; end
  def draw_label(center_x, center_y, angle, radius, amount); end
  def draw_line_markers; end
  def hide_dots; end
  def hide_dots=(arg0); end
  def initialize_ivars; end
  def line_width; end
  def line_width=(arg0); end
  def setup_drawing; end
end
class Gruff::Pie < Gruff::Base
  def center_x; end
  def center_y; end
  def chart_degrees; end
  def diameter; end
  def distance_from_center; end
  def draw; end
  def draw_label(x, y, value); end
  def ellipse_factor; end
  def graph_height; end
  def graph_width; end
  def half_height; end
  def half_width; end
  def hide_labels_less_than; end
  def hide_labels_less_than=(arg0); end
  def hide_line_markers; end
  def initialize_ivars; end
  def label_coordinates_for(slice); end
  def options; end
  def process_label_for(slice); end
  def radius; end
  def radius_offset; end
  def show_values_as_labels; end
  def show_values_as_labels=(arg0); end
  def slice_class; end
  def slices; end
  def text_offset_percentage; end
  def text_offset_percentage=(arg0); end
  def update_chart_degrees_with(degrees); end
  def x_label_coordinate(angle); end
  def y_label_coordinate(angle); end
  def zero_degree; end
  def zero_degree=(arg0); end
end
class Anonymous_Struct_73 < Struct
  def data_array; end
  def data_array=(_); end
  def options; end
  def options=(_); end
  def self.[](*arg0); end
  def self.inspect; end
  def self.members; end
  def self.new(*arg0); end
end
class Gruff::Pie::PieSlice < Anonymous_Struct_73
  def color; end
  def degrees; end
  def label; end
  def name; end
  def percentage; end
  def size; end
  def total; end
  def total=(arg0); end
  def value; end
end
class Gruff::Scatter < Gruff::Base
  def calculate_spread; end
  def circle_radius; end
  def circle_radius=(arg0); end
  def data(name, x_data_points = nil, y_data_points = nil, color = nil); end
  def dataxy(name, x_data_points = nil, y_data_points = nil, color = nil); end
  def disable_significant_rounding_x_axis; end
  def disable_significant_rounding_x_axis=(arg0); end
  def draw; end
  def draw_line_markers; end
  def enable_vertical_line_markers; end
  def enable_vertical_line_markers=(arg0); end
  def get_x_coord(x_data_point, width, offset); end
  def initialize_ivars; end
  def label(value, increment); end
  def marker_x_count; end
  def marker_x_count=(arg0); end
  def maximum_x_value; end
  def maximum_x_value=(arg0); end
  def minimum_x_value; end
  def minimum_x_value=(arg0); end
  def normalize; end
  def setup_data; end
  def setup_drawing; end
  def stroke_width; end
  def stroke_width=(arg0); end
  def use_vertical_x_labels; end
  def use_vertical_x_labels=(arg0); end
  def vertical_label(value, increment); end
  def x_axis_label_format; end
  def x_axis_label_format=(arg0); end
  def x_label_margin; end
  def x_label_margin=(arg0); end
  def y_axis_label_format; end
  def y_axis_label_format=(arg0); end
end
class Gruff::Spider < Gruff::Base
  def draw; end
  def draw_axes(center_x, center_y, radius, additive_angle, line_color = nil); end
  def draw_label(center_x, center_y, angle, radius, amount); end
  def draw_polygon(center_x, center_y, additive_angle, color = nil); end
  def hide_axes; end
  def hide_axes=(arg0); end
  def hide_text; end
  def hide_text=(value); end
  def initialize(max_value, target_width = nil); end
  def normalize_points(value); end
  def rotation; end
  def rotation=(arg0); end
  def sums_for_spider; end
  def transparent_background; end
  def transparent_background=(value); end
end
module Gruff::Base::StackedMixin
  def calculate_maximum_by_stack; end
end
class Gruff::StackedArea < Gruff::Base
  def draw; end
  def last_series_goes_on_bottom; end
  def last_series_goes_on_bottom=(arg0); end
  include Gruff::Base::StackedMixin
end
module Gruff::Base::BarValueLabelMixin
end
class Gruff::Base::BarValueLabelMixin::BarValueLabel
  def coordinates; end
  def coordinates=(arg0); end
  def initialize(size, bar_width); end
  def prepare_rendering(format); end
  def prepare_sidebar_rendering(format); end
  def values; end
  def values=(arg0); end
end
class Gruff::StackedBar < Gruff::Base
  def bar_spacing; end
  def bar_spacing=(arg0); end
  def draw; end
  def initialize_ivars; end
  def label_formatting; end
  def label_formatting=(arg0); end
  def segment_spacing; end
  def segment_spacing=(arg0); end
  def show_labels_for_bar_values; end
  def show_labels_for_bar_values=(arg0); end
  include Gruff::Base::BarValueLabelMixin
  include Gruff::Base::StackedMixin
end
class Gruff::SideBar < Gruff::Base
  def bar_spacing; end
  def bar_spacing=(arg0); end
  def calculate_spacing; end
  def draw; end
  def draw_bars; end
  def draw_label(y_offset, index, label = nil); end
  def draw_line_markers; end
  def group_spacing; end
  def group_spacing=(arg0); end
  def initialize_ivars; end
  def label_formatting; end
  def label_formatting=(arg0); end
  def show_labels_for_bar_values; end
  def show_labels_for_bar_values=(arg0); end
end
class Gruff::SideStackedBar < Gruff::SideBar
  def bar_spacing; end
  def bar_spacing=(arg0); end
  def draw; end
  def draw_bars; end
  def initialize_ivars; end
  def label_formatting; end
  def label_formatting=(arg0); end
  def segment_spacing; end
  def segment_spacing=(arg0); end
  def show_labels_for_bar_values; end
  def show_labels_for_bar_values=(arg0); end
  include Gruff::Base::BarValueLabelMixin
  include Gruff::Base::StackedMixin
end
class Gruff::AccumulatorBar < Gruff::StackedBar
  def draw; end
end
class Gruff::Scene < Gruff::Base
  def add_group(input_name, layer_names); end
  def draw; end
  def initialize(target_width, base_dir); end
  def layers; end
  def layers=(ordered_list); end
  def method_missing(method_name, *args); end
  def set_input(input_name, input_value); end
end
class Gruff::Group
  def initialize(folder_name, layers); end
  def name; end
  def send_updates(value); end
  include Observable
end
class Gruff::Layer
  def file_exists_or_blank(filename); end
  def initialize(base_dir, folder_name); end
  def name; end
  def observe(obj); end
  def path; end
  def select_boolean(value); end
  def select_default; end
  def select_numeric(value); end
  def select_string(value); end
  def select_time(value); end
  def update(value); end
end
class Gruff::Renderer
  def background(columns, rows, scale, theme_options); end
  def draw; end
  def draw=(arg0); end
  def gradated_background(columns, rows, top_color, bottom_color, direct = nil); end
  def image; end
  def image=(arg0); end
  def image_background(scale, image_path); end
  def render_transparent_background(columns, rows); end
  def scale; end
  def scale=(arg0); end
  def self.allocate; end
  def self.background_image=(image); end
  def self.finish; end
  def self.font=(font); end
  def self.instance; end
  def self.new(*arg0); end
  def self.setup(columns, rows, font, scale, theme_options); end
  def self.setup_transparent_background(columns, rows); end
  def self.to_blob(file_format); end
  def self.write(file_name); end
  def solid_background(columns, rows, color); end
  extend Singleton::SingletonClassMethods
  include Singleton
end
class Gruff::Renderer::Rectangle
  def initialize(args = nil); end
  def render(upper_left_x, upper_left_y, lower_right_x, lower_right_y); end
end
class Gruff::Renderer::Circle
  def initialize(args = nil); end
  def render(origin_x, origin_y, perim_x, perim_y); end
end
class Gruff::Renderer::DashLine
  def initialize(args = nil); end
  def render(start_x, start_y, end_x, end_y); end
end
class Gruff::Renderer::Line
  def initialize(args = nil); end
  def render(start_x, start_y, end_x, end_y); end
end
class Gruff::Renderer::Polyline
  def initialize(args = nil); end
  def render(points); end
end
class Gruff::Renderer::Polygon
  def initialize(args = nil); end
  def render(points); end
end
class Gruff::Renderer::Bezier
  def initialize(args = nil); end
  def render(points); end
end
class Gruff::Renderer::Ellipse
  def initialize(args = nil); end
  def render(origin_x, origin_y, width, height, arc_start, arc_end); end
end
class Gruff::Renderer::Dot
  def circle(draw, new_x, new_y, circle_radius); end
  def initialize(style, config); end
  def render(new_x, new_y, circle_radius); end
  def square(draw, new_x, new_y, circle_radius); end
end
class Gruff::Renderer::Text
  def initialize(text, args = nil); end
  def render(width, height, x, y, gravity = nil); end
  def self.metrics(text, size, font_weight = nil); end
end
class Gruff::Store
  def add(*args); end
  def change_colors(colors); end
  def columns; end
  def data; end
  def empty?; end
  def initialize(data_class); end
  def length; end
  def max; end
  def max_x; end
  def max_y; end
  def min; end
  def min_x; end
  def min_y; end
  def norm_data; end
  def normalize(args = nil); end
  def reverse!; end
  def sort_data!; end
  def sort_norm_data!; end
end
class Anonymous_Struct_74 < Struct
  def color; end
  def color=(_); end
  def label; end
  def label=(_); end
  def points; end
  def points=(_); end
  def self.[](*arg0); end
  def self.inspect; end
  def self.members; end
  def self.new(*arg0); end
end
class Gruff::Store::BaseData < Anonymous_Struct_74
  def columns; end
  def initialize(label, points, color); end
  def max; end
  def min; end
  def normalize(args = nil); end
end
class Anonymous_Struct_75 < Struct
  def color; end
  def color=(_); end
  def custom; end
  def custom=(_); end
  def label; end
  def label=(_); end
  def points; end
  def points=(_); end
  def self.[](*arg0); end
  def self.inspect; end
  def self.members; end
  def self.new(*arg0); end
end
class Gruff::Store::CustomData < Anonymous_Struct_75
  def columns; end
  def initialize(label, points, color, custom = nil); end
  def max; end
  def min; end
  def normalize(args = nil); end
end
class Anonymous_Struct_76 < Struct
  def color; end
  def color=(_); end
  def label; end
  def label=(_); end
  def self.[](*arg0); end
  def self.inspect; end
  def self.members; end
  def self.new(*arg0); end
  def x_points; end
  def x_points=(_); end
  def y_points; end
  def y_points=(_); end
end
class Gruff::Store::XYData < Anonymous_Struct_76
  def columns; end
  def coordinates; end
  def initialize(label, y_points, color, x_points = nil); end
  def max; end
  def max_x; end
  def max_y; end
  def min; end
  def min_x; end
  def min_y; end
  def normalize(args = nil); end
  def x_points; end
end
module Gruff::Mini
end
module Gruff::Mini::Legend
  def calculate_legend_width; end
  def calculate_line_height; end
  def draw_vertical_legend; end
  def expand_canvas_for_vertical_legend; end
  def hide_mini_legend; end
  def hide_mini_legend=(arg0); end
  def initialize(*arg0); end
  def legend_position; end
  def legend_position=(arg0); end
  def truncate_legend_label(label); end
end
class Gruff::Mini::Bar < Gruff::Bar
  def draw; end
  def initialize_ivars; end
  include Gruff::Mini::Legend
end
class Gruff::Mini::Pie < Gruff::Pie
  def draw; end
  def initialize_ivars; end
  include Gruff::Mini::Legend
end
class Gruff::Mini::SideBar < Gruff::SideBar
  def draw; end
  def initialize_ivars; end
  include Gruff::Mini::Legend
end
