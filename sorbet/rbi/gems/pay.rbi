# This file is autogenerated. Do not edit it by hand. Regenerate it with:
#   srb rbi gems

# typed: true
#
# If you would like to make changes to this file, great! Please create the gem's shim here:
#
#   https://github.com/sorbet/sorbet-typed/new/master?filename=lib/pay/all/pay.rbi
#
# pay-2.6.11

module Pay
  def application_name; end
  def application_name=(obj); end
  def automount_routes; end
  def automount_routes=(obj); end
  def billable_class; end
  def billable_class=(obj); end
  def billable_table; end
  def billable_table=(obj); end
  def braintree_gateway; end
  def braintree_gateway=(obj); end
  def business_address; end
  def business_address=(obj); end
  def business_name; end
  def business_name=(obj); end
  def chargeable_class; end
  def chargeable_class=(obj); end
  def chargeable_table; end
  def chargeable_table=(obj); end
  def default_plan_name; end
  def default_plan_name=(obj); end
  def default_product_name; end
  def default_product_name=(obj); end
  def model_parent_class; end
  def model_parent_class=(obj); end
  def routes_path; end
  def routes_path=(obj); end
  def self.application_name; end
  def self.application_name=(obj); end
  def self.automount_routes; end
  def self.automount_routes=(obj); end
  def self.billable_class; end
  def self.billable_class=(obj); end
  def self.billable_models; end
  def self.billable_table; end
  def self.billable_table=(obj); end
  def self.braintree_gateway; end
  def self.braintree_gateway=(obj); end
  def self.business_address; end
  def self.business_address=(obj); end
  def self.business_name; end
  def self.business_name=(obj); end
  def self.charge_model; end
  def self.chargeable_class; end
  def self.chargeable_class=(obj); end
  def self.chargeable_table; end
  def self.chargeable_table=(obj); end
  def self.default_plan_name; end
  def self.default_plan_name=(obj); end
  def self.default_product_name; end
  def self.default_product_name=(obj); end
  def self.find_billable(processor:, processor_id:); end
  def self.model_parent_class; end
  def self.model_parent_class=(obj); end
  def self.receipts_supported?; end
  def self.routes_path; end
  def self.routes_path=(obj); end
  def self.send_emails; end
  def self.send_emails=(obj); end
  def self.setup; end
  def self.subscription_class; end
  def self.subscription_class=(obj); end
  def self.subscription_model; end
  def self.subscription_table; end
  def self.subscription_table=(obj); end
  def self.support_email; end
  def self.support_email=(obj); end
  def self.user_model; end
  def send_emails; end
  def send_emails=(obj); end
  def subscription_class; end
  def subscription_class=(obj); end
  def subscription_table; end
  def subscription_table=(obj); end
  def support_email; end
  def support_email=(obj); end
end
class Pay::Engine < Rails::Engine
end
class Pay::Error < StandardError
end
class Pay::PaymentError < StandardError
  def initialize(payment); end
  def payment; end
end
class Pay::ActionRequired < Pay::PaymentError
  def message; end
end
class Pay::InvalidPaymentMethod < Pay::PaymentError
  def message; end
end
module Pay::Env
  def credentials; end
  def env; end
  def find_value_by_name(scope, name); end
  def secrets; end
end
module Pay::Stripe
  def self.configure_webhooks; end
  def self.private_key; end
  def self.public_key; end
  def self.setup; end
  def self.signing_secret; end
  extend Pay::Env
end
module Pay::Stripe::Webhooks
end
module Pay::Webhooks
  def self.configure(*args, &block); end
  def self.delegator; end
  def self.instrument(*args, &block); end
end
class Pay::Webhooks::Delegator
  def all(callable = nil, &block); end
  def backend; end
  def configure(&block); end
  def initialize; end
  def instrument(event:, type:); end
  def name_with_namespace(name, delimiter: nil); end
  def subscribe(name, callable = nil, &block); end
  def to_regexp(name); end
  def unsubscribe(name); end
end
class Pay::Webhooks::Delegator::NotificationAdapter
  def call(*args); end
  def initialize(subscriber); end
end
class Pay::Stripe::Webhooks::ChargeSucceeded
  def call(event); end
  def notify_user(billable, charge); end
end
class Pay::Stripe::Webhooks::ChargeRefunded
  def call(event); end
  def notify_user(billable, charge); end
end
class Pay::Stripe::Webhooks::PaymentIntentSucceeded
  def call(event); end
  def notify_user(billable, charge); end
end
class Pay::Stripe::Webhooks::SubscriptionRenewing
  def call(event); end
  def notify_user(billable, subscription, date); end
end
class Pay::Stripe::Webhooks::PaymentActionRequired
  def call(event); end
  def notify_user(billable, payment_intent_id, subscription); end
end
class Pay::Stripe::Webhooks::SubscriptionCreated
  def call(event); end
end
class Pay::Stripe::Webhooks::SubscriptionUpdated
  def call(event); end
end
class Pay::Stripe::Webhooks::SubscriptionDeleted
  def call(event); end
end
class Pay::Stripe::Webhooks::CustomerUpdated
  def call(event); end
end
class Pay::Stripe::Webhooks::CustomerDeleted
  def call(event); end
end
class Pay::Stripe::Webhooks::PaymentMethodUpdated
  def call(event); end
end
module Pay::ApplicationRecord::GeneratedAttributeMethods
end
class Pay::ApplicationRecord < ApplicationRecord
  def self._validators; end
  def self.attribute_type_decorations; end
  def self.defined_enums; end
  def self.json_column?(name); end
  include Pay::ApplicationRecord::GeneratedAssociationMethods
  include Pay::ApplicationRecord::GeneratedAttributeMethods
end
module Pay::ApplicationRecord::GeneratedAssociationMethods
end
class Pay::ApplicationRecord::ActiveRecord_Relation < ActiveRecord::Relation
  extend ActiveRecord::Delegation::ClassSpecificRelation::ClassMethods
  include ActiveRecord::Delegation::ClassSpecificRelation
  include Pay::ApplicationRecord::GeneratedRelationMethods
end
module Pay::ApplicationRecord::GeneratedRelationMethods
end
class Pay::ApplicationRecord::ActiveRecord_Associations_CollectionProxy < ActiveRecord::Associations::CollectionProxy
  extend ActiveRecord::Delegation::ClassSpecificRelation::ClassMethods
  include ActiveRecord::Delegation::ClassSpecificRelation
  include Pay::ApplicationRecord::GeneratedRelationMethods
end
class Pay::ApplicationRecord::ActiveRecord_AssociationRelation < ActiveRecord::AssociationRelation
  extend ActiveRecord::Delegation::ClassSpecificRelation::ClassMethods
  include ActiveRecord::Delegation::ClassSpecificRelation
  include Pay::ApplicationRecord::GeneratedRelationMethods
end
module Pay::Charge::GeneratedAttributeMethods
end
class Pay::Charge < Pay::ApplicationRecord
  def autosave_associated_records_for_owner(*args); end
  def braintree?; end
  def charged_to; end
  def fake_processor?; end
  def paddle?; end
  def payment_processor; end
  def payment_processor_for(name); end
  def paypal?; end
  def processor_charge; end
  def refund!(refund_amount = nil); end
  def self.__callbacks; end
  def self._reflections; end
  def self._validators; end
  def self.attribute_type_decorations; end
  def self.braintree(*args); end
  def self.default_scopes; end
  def self.defined_enums; end
  def self.fake_processor(*args); end
  def self.paddle(*args); end
  def self.sorted(*args); end
  def self.stripe(*args); end
  def stripe?; end
  include Anonymous_Module_89
  include Pay::Charge::GeneratedAssociationMethods
  include Pay::Charge::GeneratedAttributeMethods
end
module Pay::Charge::GeneratedAssociationMethods
  def owner; end
  def owner=(value); end
  def reload_owner; end
end
class Pay::Charge::ActiveRecord_Relation < ActiveRecord::Relation
  extend ActiveRecord::Delegation::ClassSpecificRelation::ClassMethods
  include ActiveRecord::Delegation::ClassSpecificRelation
  include Pay::Charge::GeneratedRelationMethods
end
module Pay::Charge::GeneratedRelationMethods
  def braintree(*args, &block); end
  def fake_processor(*args, &block); end
  def paddle(*args, &block); end
  def sorted(*args, &block); end
  def stripe(*args, &block); end
end
class Pay::Charge::ActiveRecord_Associations_CollectionProxy < ActiveRecord::Associations::CollectionProxy
  extend ActiveRecord::Delegation::ClassSpecificRelation::ClassMethods
  include ActiveRecord::Delegation::ClassSpecificRelation
  include Pay::Charge::GeneratedRelationMethods
end
class Pay::Charge::ActiveRecord_AssociationRelation < ActiveRecord::AssociationRelation
  extend ActiveRecord::Delegation::ClassSpecificRelation::ClassMethods
  include ActiveRecord::Delegation::ClassSpecificRelation
  include Pay::Charge::GeneratedRelationMethods
end
module Anonymous_Module_89
  def paddle_receipt_url; end
  def paddle_receipt_url=(value); end
  def paddle_receipt_url_before_last_save; end
  def paddle_receipt_url_change; end
  def paddle_receipt_url_changed?; end
  def paddle_receipt_url_was; end
  def saved_change_to_paddle_receipt_url; end
  def saved_change_to_paddle_receipt_url?; end
end
module Pay::Receipts
  def filename; end
  def line_items; end
  def product; end
  def receipt; end
  def receipt_pdf; end
end
module Pay::ApplicationHelper
end
module Pay::Billable
  def braintree?; end
  def charge(*args, &block); end
  def create_pay_subscription(subscription, processor, name, plan, options = nil); end
  def create_setup_intent; end
  def customer; end
  def customer_name; end
  def default_generic_trial?(name, plan); end
  def has_incomplete_payment?(name: nil); end
  def invoice!(options = nil); end
  def on_generic_trial?; end
  def on_trial?(name: nil, plan: nil); end
  def on_trial_or_subscribed?(name: nil, processor_plan: nil); end
  def paddle?; end
  def pay_fake_processor_is_allowed; end
  def payment_processor; end
  def payment_processor_for(name); end
  def paypal?; end
  def processor; end
  def processor=(value); end
  def processor_subscription(subscription_id, options = nil); end
  def self.included(base = nil, &block); end
  def self.includers; end
  def stripe?; end
  def subscribe(*args, &block); end
  def subscribed?(name: nil, processor_plan: nil); end
  def subscription(name: nil); end
  def upcoming_invoice; end
  def update_card(*args, &block); end
  extend ActiveSupport::Concern
end
module Pay::Billable::SyncEmail
  def enqeue_sync_email_job; end
  def should_sync_email_with_processor?; end
  def sync_email_with_processor; end
  extend ActiveSupport::Concern
end
class Pay::ApplicationController < ActionController::Base
  def _layout(lookup_context, formats); end
  def self.__callbacks; end
  def self._helpers; end
  def self._routes; end
  def self._wrapper_options; end
  def self.helpers_path; end
  def self.middleware_stack; end
  include ActionDispatch::Routing::UrlFor
  include Anonymous_Module_90
end
module Anonymous_Module_90
  def _generate_paths_by_default; end
  def _routes; end
  def self._routes; end
  def self.full_url_for(options); end
  def self.optimize_routes_generation?; end
  def self.polymorphic_path(record_or_hash_or_array, options = nil); end
  def self.polymorphic_url(record_or_hash_or_array, options = nil); end
  def self.route_for(name, *args); end
  def self.url_for(options); end
  def self.url_options; end
  extend ActiveSupport::Concern
  extend Anonymous_Module_23
  extend Anonymous_Module_24
  include ActionDispatch::Routing::UrlFor
  include Anonymous_Module_23
  include Anonymous_Module_24
end
class Pay::PaymentsController < Pay::ApplicationController
  def _layout(lookup_context, formats); end
  def self._helpers; end
  def self._layout; end
  def self._layout_conditions; end
  def self._routes; end
  def self._wrapper_options; end
  def self.helpers_path; end
  def self.middleware_stack; end
  def show; end
  include ActionDispatch::Routing::UrlFor
  include Anonymous_Module_91
end
module Anonymous_Module_91
  def _generate_paths_by_default; end
  def _routes; end
  def self._routes; end
  def self.full_url_for(options); end
  def self.optimize_routes_generation?; end
  def self.polymorphic_path(record_or_hash_or_array, options = nil); end
  def self.polymorphic_url(record_or_hash_or_array, options = nil); end
  def self.route_for(name, *args); end
  def self.url_for(options); end
  def self.url_options; end
  extend ActiveSupport::Concern
  extend Anonymous_Module_23
  extend Anonymous_Module_24
  include ActionDispatch::Routing::UrlFor
  include Anonymous_Module_23
  include Anonymous_Module_24
end
class Pay::ApplicationJob < ActiveJob::Base
end
class Pay::EmailSyncJob < Pay::ApplicationJob
  def perform(id, class_name); end
  def self.queue_name; end
end
class Pay::ApplicationMailer < ActionMailer::Base
  def _layout(lookup_context, formats); end
  def self._helpers; end
  def self._layout; end
  def self._layout_conditions; end
  def self._routes; end
  def self.default_params; end
  include ActionDispatch::Routing::UrlFor
  include Anonymous_Module_92
end
module Anonymous_Module_92
  def _generate_paths_by_default; end
  def _routes; end
  def self._routes; end
  def self.full_url_for(options); end
  def self.optimize_routes_generation?; end
  def self.polymorphic_path(record_or_hash_or_array, options = nil); end
  def self.polymorphic_url(record_or_hash_or_array, options = nil); end
  def self.route_for(name, *args); end
  def self.url_for(options); end
  def self.url_options; end
  extend ActiveSupport::Concern
  extend Anonymous_Module_23
  include ActionDispatch::Routing::UrlFor
  include Anonymous_Module_23
end
class Pay::UserMailer < Pay::ApplicationMailer
  def _layout(lookup_context, formats); end
  def payment_action_required; end
  def receipt; end
  def refund; end
  def self._helpers; end
  def self._routes; end
  def subscription_renewing; end
  def to; end
  include ActionDispatch::Routing::UrlFor
  include Anonymous_Module_93
end
module Anonymous_Module_93
  def _generate_paths_by_default; end
  def _routes; end
  def self._routes; end
  def self.full_url_for(options); end
  def self.optimize_routes_generation?; end
  def self.polymorphic_path(record_or_hash_or_array, options = nil); end
  def self.polymorphic_url(record_or_hash_or_array, options = nil); end
  def self.route_for(name, *args); end
  def self.url_for(options); end
  def self.url_options; end
  extend ActiveSupport::Concern
  extend Anonymous_Module_23
  include ActionDispatch::Routing::UrlFor
  include Anonymous_Module_23
end
module Pay::Subscription::GeneratedAttributeMethods
end
class Pay::Subscription < Pay::ApplicationRecord
  def active?; end
  def autosave_associated_records_for_owner(*args); end
  def braintree?; end
  def cancel(*args, &block); end
  def cancel_now!(*args, &block); end
  def canceled?; end
  def cancelled?; end
  def change_quantity(quantity); end
  def fake_processor?; end
  def has_incomplete_payment?; end
  def incomplete?; end
  def latest_payment; end
  def no_prorate; end
  def on_grace_period?(*args, &block); end
  def on_trial?; end
  def paddle?; end
  def past_due?; end
  def pause(*args, &block); end
  def paused?(*args, &block); end
  def payment_processor; end
  def payment_processor_for(name); end
  def processor_subscription(**options); end
  def resume; end
  def self.__callbacks; end
  def self._reflections; end
  def self._validators; end
  def self.active(*args); end
  def self.attribute_type_decorations; end
  def self.attributes_to_define_after_schema_loads; end
  def self.braintree(*args); end
  def self.cancelled(*args); end
  def self.defined_enums; end
  def self.fake_processor(*args); end
  def self.for_name(*args); end
  def self.incomplete(*args); end
  def self.on_grace_period(*args); end
  def self.on_trial(*args); end
  def self.paddle(*args); end
  def self.past_due(*args); end
  def self.stripe(*args); end
  def skip_trial; end
  def stripe?; end
  def swap(plan); end
  def swap_and_invoice(plan); end
  include Anonymous_Module_94
  include Pay::Subscription::GeneratedAssociationMethods
  include Pay::Subscription::GeneratedAttributeMethods
end
module Pay::Subscription::GeneratedAssociationMethods
  def owner; end
  def owner=(value); end
  def reload_owner; end
end
class Pay::Subscription::ActiveRecord_Relation < ActiveRecord::Relation
  extend ActiveRecord::Delegation::ClassSpecificRelation::ClassMethods
  include ActiveRecord::Delegation::ClassSpecificRelation
  include Pay::Subscription::GeneratedRelationMethods
end
module Pay::Subscription::GeneratedRelationMethods
  def active(*args, &block); end
  def braintree(*args, &block); end
  def cancelled(*args, &block); end
  def fake_processor(*args, &block); end
  def for_name(*args, &block); end
  def incomplete(*args, &block); end
  def on_grace_period(*args, &block); end
  def on_trial(*args, &block); end
  def paddle(*args, &block); end
  def past_due(*args, &block); end
  def stripe(*args, &block); end
end
class Pay::Subscription::ActiveRecord_Associations_CollectionProxy < ActiveRecord::Associations::CollectionProxy
  extend ActiveRecord::Delegation::ClassSpecificRelation::ClassMethods
  include ActiveRecord::Delegation::ClassSpecificRelation
  include Pay::Subscription::GeneratedRelationMethods
end
class Pay::Subscription::ActiveRecord_AssociationRelation < ActiveRecord::AssociationRelation
  extend ActiveRecord::Delegation::ClassSpecificRelation::ClassMethods
  include ActiveRecord::Delegation::ClassSpecificRelation
  include Pay::Subscription::GeneratedRelationMethods
end
module Anonymous_Module_94
  def paddle_cancel_url; end
  def paddle_cancel_url=(value); end
  def paddle_cancel_url_before_last_save; end
  def paddle_cancel_url_change; end
  def paddle_cancel_url_changed?; end
  def paddle_cancel_url_was; end
  def paddle_paused_from; end
  def paddle_paused_from=(value); end
  def paddle_paused_from_before_last_save; end
  def paddle_paused_from_change; end
  def paddle_paused_from_changed?; end
  def paddle_paused_from_was; end
  def paddle_update_url; end
  def paddle_update_url=(value); end
  def paddle_update_url_before_last_save; end
  def paddle_update_url_change; end
  def paddle_update_url_changed?; end
  def paddle_update_url_was; end
  def saved_change_to_paddle_cancel_url; end
  def saved_change_to_paddle_cancel_url?; end
  def saved_change_to_paddle_paused_from; end
  def saved_change_to_paddle_paused_from?; end
  def saved_change_to_paddle_update_url; end
  def saved_change_to_paddle_update_url?; end
end
class Pay::Webhooks::StripeController < Pay::ApplicationController
  def _layout(lookup_context, formats); end
  def create; end
  def delegate_event(event); end
  def log_error(e); end
  def secrets(payload, signature); end
  def self.__callbacks; end
  def self._helpers; end
  def self._routes; end
  def self._wrapper_options; end
  def self.helpers_path; end
  def self.middleware_stack; end
  def verified_event; end
  include ActionDispatch::Routing::UrlFor
  include Anonymous_Module_95
end
module Anonymous_Module_95
  def _generate_paths_by_default; end
  def _routes; end
  def self._routes; end
  def self.full_url_for(options); end
  def self.optimize_routes_generation?; end
  def self.polymorphic_path(record_or_hash_or_array, options = nil); end
  def self.polymorphic_url(record_or_hash_or_array, options = nil); end
  def self.route_for(name, *args); end
  def self.url_for(options); end
  def self.url_options; end
  extend ActiveSupport::Concern
  extend Anonymous_Module_23
  extend Anonymous_Module_24
  include ActionDispatch::Routing::UrlFor
  include Anonymous_Module_23
  include Anonymous_Module_24
end
class Pay::Webhooks::BraintreeController < Pay::ApplicationController
  def _layout(lookup_context, formats); end
  def create; end
  def delegate_event(event); end
  def self.__callbacks; end
  def self._helpers; end
  def self._routes; end
  def self._wrapper_options; end
  def self.helpers_path; end
  def self.middleware_stack; end
  def verified_event; end
  include ActionDispatch::Routing::UrlFor
  include Anonymous_Module_96
end
module Anonymous_Module_96
  def _generate_paths_by_default; end
  def _routes; end
  def self._routes; end
  def self.full_url_for(options); end
  def self.optimize_routes_generation?; end
  def self.polymorphic_path(record_or_hash_or_array, options = nil); end
  def self.polymorphic_url(record_or_hash_or_array, options = nil); end
  def self.route_for(name, *args); end
  def self.url_for(options); end
  def self.url_options; end
  extend ActiveSupport::Concern
  extend Anonymous_Module_23
  extend Anonymous_Module_24
  include ActionDispatch::Routing::UrlFor
  include Anonymous_Module_23
  include Anonymous_Module_24
end
class Pay::Webhooks::PaddleController < Pay::ApplicationController
  def _layout(lookup_context, formats); end
  def check_params; end
  def create; end
  def delegate_event(event); end
  def self.__callbacks; end
  def self._helpers; end
  def self._routes; end
  def self._wrapper_options; end
  def self.helpers_path; end
  def self.middleware_stack; end
  def type; end
  def verified_event; end
  include ActionDispatch::Routing::UrlFor
  include Anonymous_Module_97
end
module Anonymous_Module_97
  def _generate_paths_by_default; end
  def _routes; end
  def self._routes; end
  def self.full_url_for(options); end
  def self.optimize_routes_generation?; end
  def self.polymorphic_path(record_or_hash_or_array, options = nil); end
  def self.polymorphic_url(record_or_hash_or_array, options = nil); end
  def self.route_for(name, *args); end
  def self.url_for(options); end
  def self.url_options; end
  extend ActiveSupport::Concern
  extend Anonymous_Module_23
  extend Anonymous_Module_24
  include ActionDispatch::Routing::UrlFor
  include Anonymous_Module_23
  include Anonymous_Module_24
end
