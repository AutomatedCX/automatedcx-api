# This file is autogenerated. Do not edit it by hand. Regenerate it with:
#   srb rbi gems

# typed: true
#
# If you would like to make changes to this file, great! Please create the gem's shim here:
#
#   https://github.com/sorbet/sorbet-typed/new/master?filename=lib/prawn-table/all/prawn-table.rbi
#
# prawn-table-0.2.2

module Prawn
end
class Prawn::Table
  def add_header(row_number, cells_this_page); end
  def add_one_header_row(page_of_cells, x_offset, y, row, row_of_header = nil); end
  def assert_proper_table_data(data); end
  def before_rendering_page(&block); end
  def cell_style=(style_hash); end
  def cells; end
  def column(col_spec); end
  def column_length; end
  def column_widths; end
  def column_widths=(widths); end
  def columns(col_spec); end
  def draw; end
  def fits_on_page?(needed_height, use_reference_bounds = nil); end
  def header=(arg0); end
  def header_rows; end
  def height; end
  def initial_row_on_initial_page; end
  def initialize(data, document, options = nil, &block); end
  def ink_and_draw_cells(cells_this_page, draw_cells = nil); end
  def ink_and_draw_cells_and_start_new_page(cells_this_page, cell); end
  def ink_cells(cells_this_page); end
  def make_cells(data); end
  def natural_column_widths; end
  def natural_width; end
  def number_of_header_rows; end
  def position=(arg0); end
  def position_cells; end
  def row(row_spec); end
  def row_colors=(arg0); end
  def row_heights; end
  def row_length; end
  def rows(row_spec); end
  def set_background_color(cell, started_new_page_at_row); end
  def set_column_widths; end
  def set_row_heights; end
  def start_new_page?(cell, offset, ref_bounds); end
  def style(stylable, style_hash = nil, &block); end
  def width; end
  def width=(arg0); end
  def with_position; end
end
class Prawn::Table::ColumnWidthCalculator
  def aggregate_cell_values(row_or_column, meth, aggregate); end
  def fill_values_if_needed(values, cell, index, meth); end
  def has_a_span_dummy?(row); end
  def initialize(cells); end
  def natural_widths; end
end
class Prawn::Document
  def cell(options = nil); end
  def make_cell(content, options = nil); end
end
class Prawn::Table::Cell
  def avg_spanned_min_width; end
  def background_color; end
  def background_color=(arg0); end
  def border_bottom_color; end
  def border_bottom_color=(val); end
  def border_bottom_line; end
  def border_bottom_line=(val); end
  def border_bottom_width; end
  def border_bottom_width=(val); end
  def border_color=(color); end
  def border_colors; end
  def border_colors=(color); end
  def border_left_color; end
  def border_left_color=(val); end
  def border_left_line; end
  def border_left_line=(val); end
  def border_left_width; end
  def border_left_width=(val); end
  def border_line=(line); end
  def border_lines; end
  def border_lines=(line); end
  def border_right_color; end
  def border_right_color=(val); end
  def border_right_line; end
  def border_right_line=(val); end
  def border_right_width; end
  def border_right_width=(val); end
  def border_top_color; end
  def border_top_color=(val); end
  def border_top_line; end
  def border_top_line=(val); end
  def border_top_width; end
  def border_top_width=(val); end
  def border_width=(width); end
  def border_widths; end
  def border_widths=(width); end
  def borders; end
  def borders=(arg0); end
  def colspan; end
  def colspan=(span); end
  def content; end
  def content=(arg0); end
  def content_height; end
  def content_width; end
  def draw(pt = nil); end
  def draw_background(pt); end
  def draw_borders(pt); end
  def draw_bounded_content(pt); end
  def draw_content; end
  def dummy_cells; end
  def height; end
  def height=(arg0); end
  def height_ignoring_span; end
  def initialize(pdf, point, options = nil); end
  def max_width; end
  def max_width_ignoring_span; end
  def min_width; end
  def min_width_ignoring_span; end
  def natural_content_height; end
  def natural_content_width; end
  def padding; end
  def padding=(pad); end
  def padding_bottom; end
  def padding_bottom=(val); end
  def padding_left; end
  def padding_left=(val); end
  def padding_right; end
  def padding_right=(val); end
  def padding_top; end
  def padding_top=(val); end
  def relative_x; end
  def relative_y(offset = nil); end
  def rowspan; end
  def rowspan=(span); end
  def self.draw_cells(cells); end
  def self.make(pdf, content, options = nil); end
  def set_width_constraints; end
  def spanned_content_height; end
  def spanned_content_width; end
  def style(options = nil, &block); end
  def width; end
  def width=(w); end
  def width_ignoring_span; end
  def x; end
  def x=(val); end
  def y; end
  def y=(val); end
end
class Prawn::Table::Cells < Array
  def [](row, col); end
  def []=(row, col, cell); end
  def aggregate_cell_values(row_or_column, meth, aggregate); end
  def column(col_spec); end
  def column_count; end
  def columns(col_spec); end
  def filter(&block); end
  def fits_on_current_page?(offset, ref_bounds); end
  def height; end
  def height_with_span; end
  def index_cells; end
  def max_width; end
  def method_missing(id, *args, &block); end
  def min_width; end
  def row(row_spec); end
  def row_count; end
  def rows(row_spec); end
  def style(options = nil, &block); end
  def transform_spec(spec, first, total); end
  def width; end
end
module Prawn::Table::Cell::InTable
  def column; end
  def column=(arg0); end
  def row; end
  def row=(arg0); end
end
class Prawn::Table::Cell::Text < Prawn::Table::Cell
  def align; end
  def align=(v); end
  def draw_content; end
  def font; end
  def font=(arg0); end
  def font_style=(style); end
  def initialize(pdf, point, options = nil); end
  def inline_format; end
  def inline_format=(v); end
  def kerning; end
  def kerning=(v); end
  def leading; end
  def leading=(v); end
  def min_font_size; end
  def min_font_size=(v); end
  def natural_content_height; end
  def natural_content_width; end
  def overflow; end
  def overflow=(v); end
  def rotate; end
  def rotate=(v); end
  def rotate_around; end
  def rotate_around=(v); end
  def set_width_constraints; end
  def single_line; end
  def single_line=(v); end
  def size; end
  def size=(v); end
  def skip_encoding; end
  def skip_encoding=(v); end
  def styled_width_of(text); end
  def styled_width_of_single_character; end
  def text_box(extra_options = nil); end
  def text_color=(arg0); end
  def valign; end
  def valign=(v); end
  def with_font; end
  def with_text_color; end
end
class Prawn::Table::Cell::Subtable < Prawn::Table::Cell
  def draw_content; end
  def initialize(pdf, point, options = nil); end
  def max_width; end
  def min_width; end
  def natural_content_height; end
  def natural_content_width; end
  def subtable; end
  def text_color=(color); end
end
class Prawn::Table::Cell::Image < Prawn::Table::Cell
  def draw_content; end
  def fit=(f); end
  def image=(file); end
  def image_height=(h); end
  def image_width=(w); end
  def initialize(pdf, point, options = nil); end
  def natural_content_height; end
  def natural_content_width; end
  def position=(p); end
  def scale=(s); end
  def vposition=(vp); end
end
class Prawn::Table::Cell::SpanDummy < Prawn::Table::Cell
  def avg_spanned_min_width; end
  def background_color; end
  def border_bottom_color=(val); end
  def border_bottom_width=(val); end
  def border_right_color=(val); end
  def border_right_width=(val); end
  def bottommost?; end
  def draw_borders(pt); end
  def draw_bounded_content(pt); end
  def initialize(pdf, master_cell); end
  def natural_content_height; end
  def natural_content_width; end
  def padding_bottom=(val); end
  def padding_right=(val); end
  def rightmost?; end
end
module Prawn::Errors
end
class Prawn::Errors::InvalidTableData < StandardError
end
class Prawn::Errors::EmptyTable < StandardError
end
module Prawn::Table::Interface
  def make_table(data, options = nil, &block); end
  def table(data, options = nil, &block); end
end
